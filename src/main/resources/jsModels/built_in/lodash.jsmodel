Heap: {
  #Global: {
    "_": <#lodash, T, F, T>
  },
  #lodash: {
    [[Class]]: "Object",
    [[Extensible]]: true,
    [[Prototype]]: #Object.prototype,
    "clone": <#lodash.clone, T, F, T>,
    "cloneDeep": <#lodash.cloneDeep, T, F, T>,
    "defaults": <#lodash.defaults, T, F, T>,
    "defaultsDeep": <#lodash.defaultsDeep, T, F, T>,
    "each": <#lodash.each, T, F, T>,
    "filter": <#lodash.filter, T, F, T>,
    "find": <#lodash.find, T, F, T>,
    "forEach": <#lodash.forEach, T, F, T>,
    "get": <#lodash.get, T, F, T>,
    "invert": <#lodash.invert, T, F, T>,
    "isArray": <#lodash.isArray, T, F, T>,
    "isEmpty": <#lodash.isEmpty, T, F, T>,
    "isObject": <#lodash.isObject, T, F, T>,
    "isPlainObject": <#lodash.isPlainObject, T, F, T>,
    "isString": <#lodash.isString, T, F, T>,
    "isUndefined": <#lodash.isUndefined, T, F, T>,
    "keys": <#lodash.keys, T, F, T>,
    "map": <#lodash.map, T, F, T>,
    "merge": <#lodash.merge, T, F, T>,
    "mixin": <#lodash.mixin, T, F, T>,
    "reduce": <#lodash.reduce, T, F, T>
  },
  #lodash.clone: {
    [[Call]]: fun(1),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <4, F, F, F>
  },
  #lodash.cloneDeep: {
    [[Call]]: fun(2),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <3, F, F, F>
  },
  #lodash.defaults: {
    [[Call]]: fun(3),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <2, F, F, F>
  },
  #lodash.defaultsDeep: {
    [[Call]]: fun(4),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <2, F, F, F>
  },
  #lodash.each: {
    [[Call]]: fun(5),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <2, F, F, F>
  },
  #lodash.filter: {
    [[Call]]: fun(6),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <3, F, F, F>
  },
  #lodash.find: {
    [[Call]]: fun(7),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <3, F, F, F>
  },
  #lodash.forEach: {
    [[Call]]: fun(8),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <2, F, F, F>
  },
  #lodash.get: {
    [[Call]]: fun(9),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <3, F, F, F>
  },
  #lodash.invert: {
    [[Call]]: fun(10),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <3, F, F, F>
  },
  #lodash.isArray: {
    [[Call]]: fun(11),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #lodash.isEmpty: {
    [[Call]]: fun(12),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #lodash.isObject: {
    [[Call]]: fun(13),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #lodash.isPlainObject: {
    [[Call]]: fun(14),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #lodash.isString: {
    [[Call]]: fun(15),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #lodash.isUndefined: {
    [[Call]]: fun(16),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #lodash.keys: {
    [[Call]]: fun(17),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #lodash.map: {
    [[Call]]: fun(18),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <2, F, F, F>
  },
  #lodash.merge: {
    [[Call]]: fun(19),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <3, F, F, F>
  },
  #lodash.mixin: {
    [[Call]]: fun(20),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <1, F, F, F>
  },
  #lodash.reduce: {
    [[Call]]: fun(21),
    [[Class]]: "Function",
    [[Extensible]]: true,
    [[Prototype]]: #Function.prototype,
    [[Scope]]: null,
    "length": <2, F, F, F>
  }
}

Function: {
  1: [\\
  function clone (value, isDeep, customizer, thisArg) {
    // TODO model me
    return value;
  }
  \\],
  2: [\\
  function cloneDeep (value, customizer, thisArg) {
    // TODO model me
    return value;
  }
  \\],
  3: [\\
  function defaults (object, source) {
    object = @ToObject(object);
    if (source != null) {
      source = @ToObject(source);
      for (var key in source) {
        var value = object[key];
        if (value === undefined ||
            (@SameValue(value, Object.prototype[key]) && !Object.prototype.hasOwnProperty.call(object, key))) {
          object[key] = source[key];
        }
      }
    }
  }
  \\],
  4: [\\
  function defaultsDeep (object, source) {
    // TODO model me
    return _.defaults(object, source);
  }
  \\],
  5: [\\
  function each (collection, iteratee) {
    // NOTE: collection is an array
    var array = collection;
    _.forEach(array, iteratee);
  }
  \\],
  6: [\\
  function filter (collection, predicate, thisArg) {
    // NOTE: collection is an array
    var array = collection;
    return array.filter(predicate);
  }
  \\],
  7: [\\
  function find (collection, predicate, fromIndex) {
    // NOTE: collection instanceof Array
    var array = collection;
    var index = -1,
        length = array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return array[index];
      }
    }
  }
  \\],
  8: [\\
  function forEach (collection, iteratee) {
    // NOTE: collection is an array
    var array = collection
    array.forEach(iteratee);
  }
  \\],
  9: [\\
  function get (object, path, defaultValue) {
    // NOTE: defaultValue === undefined, path is a path array
    if (object == null) {
      return;
    }

    var index = 0,
        length = path.length;

    while (object != null && index < length) {
      object = object[path[index++]];
    }
    return (index && index == length) ? object : undefined;
  }
  \\],
  10: [\\
  function invert (object, multiValue, guard) {
    // NOTE: multiValue === undefined, guard === undefined

    // if (guard && isIterateeCall(object, multiValue, guard)) {
    //   multiValue = undefined;
    // }
    var index = -1,
        props = Object.keys(object),
        length = props.length,
        result = {};

    while (++index < length) {
      var key = props[index],
          value = object[key];

      // if (multiValue) {
      //  if (hasOwnProperty.call(result, value)) {
      //    result[value].push(key);
      //  } else {
      //    result[value] = [key];
      //  }
      //}
      //else {
      result[value] = key;
      //}
    }
    return result;
  }
  \\],
  11: [\\
  function isArray (value) {
    return Array.isArray(value);
  }
  \\],
  12: [\\
  function isEmpty (value) {
    if (value == null) return true;
    if (_.isObject(value)) return !Object.keys(value).length;
    return !value.length;
  }
  \\],
  13: [\\
  function isObject (value) {
    return value !== null && typeof value === 'object' && value instanceof Object;
  }
  \\],
  14: [\\
  function isPlainObject (value) {
    return _.isObject(value) || @Prototype(value) === null;
  }
  \\],
  15: [\\
  function isString (value) {
    return typeof value === 'string' || value instanceof String;
  }
  \\],
  16: [\\
  function isUndefined (value) {
    return typeof value === 'undefined';
  }
  \\],
  17: [\\
  function keys (object) {
    return Object.keys(object);
  }
  \\],
  18: [\\
  function map (collection, iteratee) {
    if (Array.isArray(collection)) {
      var array = collection;
      return array.map(iteratee);
    }
    else {
      var index = -1,
          result = Array(collection.length);

      for (var key in collection) {
        if (Object.prototype.hasOwnProperty.call(collection, key)) {
          result[++index] = iteratee(collection[key], key, collection);
        }
      }

      return collection;
    }
  }
  \\],
  19: [\\
  function merge (object, source, customizer) {
    // TODO model me
    return object;
  }
  \\],
  20: [\\
  function mixin (context) {
    for (key in context) {
      if (Object.prototype.hasOwnProperty.call(context, key)) {
        _[key] = context[key];
      }
    }
  }
  \\],
  21: [\\
  function reduce (collection, iteratee) {
    // TODO model me
    return {};
  }
  \\]
}